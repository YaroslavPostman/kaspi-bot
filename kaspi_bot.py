import requests
import os
import datetime
from collections import defaultdict

print("üß† KASPI BOT VERSION: v3.5-debug-tagged")

KASPI_API_TOKEN = os.getenv("KASPI_API_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def get_orders():
    headers = {
        "X-Auth-Token": KASPI_API_TOKEN,
        "Content-Type": "application/json"
    }
    url = "https://mc.shop.kaspi.kz/mc/api/orderTabs/active?count=100&selectedTabs=KASPI_DELIVERY_ASSEMBLY&startIndex=0&loadPoints=true&_m=30067732"

    response = requests.get(url, headers=headers)
    print("üî¥ Raw response from Kaspi API:")
    print(response.text)

    try:
        data = response.json()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON:", str(e))
        return []

    if not data or not isinstance(data, list):
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Kaspi API.")
        return []

    raw_orders = data[0].get("orders", [])
    print("üü° Orders from JSON:", raw_orders)

    orders = []

    for order in raw_orders:
        print("üßæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑:", order.get("id"))
        positions = order.get("positions", [])
        print(f"üì¶ –ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ {order.get('id')}: {positions}")

        for product in positions:
            print("üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:", product)
            name = product.get("name", "").lower()
            qty = product.get("quantity", 1)

            color = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            size = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            for c in ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–∏–Ω–∏–π", "–∫—Ä–∞—Å–Ω—ã–π", "–±–µ–∂–µ–≤—ã–π"]:
                if c in name:
                    color = c

            for s in ["xxl", "xl", "l", "m", "s"]:
                if (
                    f" {s} " in f" {name} "
                    or f",{s}" in name
                    or name.endswith(f" {s}")
                    or name.endswith(f",{s}")
                ):
                    size = s.upper()
                    break

            orders.append({"color": color, "size": size, "qty": qty})

    print("üü¢ Orders ready to send:")
    print(orders)
    return orders

def format_orders(orders):
    grouped = defaultdict(lambda: defaultdict(int))
    for order in orders:
        grouped[order["color"]][order["size"]] += order["qty"]

    message = ""
    for color, sizes in grouped.items():
        message += f"–¶–≤–µ—Ç {color}:\n"
        for size, qty in sizes.items():
            message += f"  {size} - {qty}\n"
    return message.strip()

def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text
    }
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:", payload)
    response = requests.post(url, data=payload)
    print("üì¨ –û—Ç–≤–µ—Ç Telegram:", response.status_code, response.text)
    return response.ok

if __name__ == "__main__":
    orders = get_orders()

    print("‚úÖ MAIN: –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã:", orders)
    print("‚úÖ MAIN: –î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:", len(orders))

    if isinstance(orders, list) and any(orders):
        message = format_orders(orders)
        print("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ Telegram")
    else:
        print("‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        kz_time = datetime.datetime.utcnow() + datetime.timedelta(hours=5)
        now = kz_time.strftime("%Y-%m-%d %H:%M:%S") + " (KZT)"
        message = f"‚ùå [v3.5-debug-tagged] –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–±–æ—Ä–∫—É. –í—Ä–µ–º—è: {now}"

    print("üì® –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(message)

    send_to_telegram(message)
